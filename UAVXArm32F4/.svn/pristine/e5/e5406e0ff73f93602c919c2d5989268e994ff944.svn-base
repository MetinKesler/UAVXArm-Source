// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU 
//    General Public License as published by the Free Software Foundation, either version 3 of the 
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  
//    If not, see http://www.gnu.org/licenses/

// Barometers

#include "UAVX.h"

real32 Airspeed;

void ReadASDiffPressureI2C(void) {
	//uint8 B[2];

	//sioReadBlock(SIORF, MAXSONAR_ID, 0, 2, B); // 0
	//RangefinderAltitude = (real32) (((int32) B[0] << 8) + B[1]) * 0.01f;
	//sioWrite(SIORF, MAXSONAR_ID, 81, 1); // start read cm

} // ReadAirspeedI2C

#if defined(AIRXXX)
//#include <WireMW.h>
#include <Wire.h>   //I2C library 0x28H
byte fetch_pressure(unsigned int *p_Pressure); //convert value to byte data type


void loop()
{
  byte _status;
  unsigned int P_dat;
  unsigned int T_dat;
  double PR;
  double TR;
  double V;
  double VV;
  while (1)
  {
    _status = fetch_pressure(&P_dat, &T_dat);

    PR = (double)((P_dat-819.15)/(14744.7)) ;
    PR = (PR - 0.49060678) ;
    PR = abs(PR);
     V = ((PR*13789.5144)/1.225);
    VV = (sqrt((V)));


    TR = (double)((T_dat*0.09770395701));
    TR = TR-50;


    delay(1000);
  }
}

byte fetch_pressure(unsigned int *p_P_dat, unsigned int *p_T_dat)
{


  byte address, Press_H, Press_L, _status;
  unsigned int P_dat;
  unsigned int T_dat;

  address = 0x28;
  Wire.beginTransmission(address);
  Wire.endTransmission();
  delay(100);

  Wire.requestFrom((int)address, (int) 4);//Request 4 bytes need 4 bytes are read
  Press_H = Wire.read();
  Press_L = Wire.read();
  byte Temp_H = Wire.read();
  byte  Temp_L = Wire.read();
  Wire.endTransmission();


  _status = (Press_H >> 6) & 0x03;
  Press_H = Press_H & 0x3f;
  P_dat = (((unsigned int)Press_H) << 8) | Press_L;
  *p_P_dat = P_dat;

  Temp_L = (Temp_L >> 5);
  T_dat = (((unsigned int)Temp_H) << 3) | Temp_L;
  *p_T_dat = T_dat;
  return (_status);

}
/*
 *
 *    - 4525DO (http://www.meas-spec.com/downloads/4525DO.pdf)
 *    - untested: 5525DSO (http://www.meas-spec.com/downloads/5525DSO.pdf)
 *
 * Interface application notes:
 *
 *    - Interfacing to MEAS Digital Pressure Modules (http://www.meas-spec.com/downloads/Interfacing_to_MEAS_Digital_Pressure_Modules.pdf)
 */

/* I2C bus address is 1010001x */
#define I2C_ADDRESS_4525DO	0x28	/**< 7-bit address. Depends on the order code (this is for code "I") */

/* The 5525DSO address is 111011Cx, where C is the complementary value of the pin CSB */
#define I2C_ADDRESS_5525DSO	0x77	//0x77/* 7-bit address, addr. pin pulled low */


/* Register address */
#define ADDR_READ_MR			0x00	/* write to this address to start conversion */

/* Measurement rate is 100Hz */
#define MEAS_RATE 100
#define MEAS_DRIVER_FILTER_FREQ 1.2f
#define CONVERSION_INTERVAL	(1000000 / MEAS_RATE)	/* microseconds */

MEASAirspeed(int bus, int address = I2C_ADDRESS_4525DO, const char *path =
		PATH_4525);

/**
 * Correct for 5V rail voltage variations
 */
//void voltage_correction(real32 &diff_pres_pa, real32 &temperature);


int MScollect() {
	int ret = -EIO;

	/* read from the sensor */
	uint8_t val[4] = { 0, 0, 0, 0 };

	perf_begin(_sample_perf);

	ret = transfer(nullptr, 0, &val[0], 4);

	if (ret < 0) {
		perf_count(_comms_errors);
		perf_end(_sample_perf);
		return ret;
	}

	uint8_t status = (val[0] & 0xC0) >> 6;

	switch (status) {
	case 0:
		// Normal Operation. Good Data Packet
		break;

	case 1:
		// Reserved
		return -EAGAIN;

	case 2:
		// Stale Data. Data has been fetched since last measurement cycle.
		return -EAGAIN;

	case 3:
		// Fault Detected
		perf_count(_comms_errors);
		perf_end(_sample_perf);
		return -EAGAIN;
	}

	int16_t dp_raw = 0, dT_raw = 0;
	dp_raw = (val[0] << 8) + val[1];
	/* mask the used bits */
	dp_raw = 0x3FFF & dp_raw;
	dT_raw = (val[2] << 8) + val[3];
	dT_raw = (0xFFE0 & dT_raw) >> 5;
	real32 temperature = ((200.0f * dT_raw) / 2047) - 50;

	// Calculate differential pressure. As its centered around 8000
	// and can go positive or negative
	const real32 P_min = -1.0f;
	const real32 P_max = 1.0f;
	const real32 PSI_to_Pa = 6894.757f;
	/*
	 this equation is an inversion of the equation in the
	 pressure transfer function figure on page 4 of the datasheet

	 We negate the result so that positive differential pressures
	 are generated when the bottom port is used as the static
	 port on the pitot and top port is used as the dynamic port
	 */
	real32 diff_press_PSI = -((dp_raw - 0.1f * 16383) * (P_max - P_min) / (0.8f
			* 16383) + P_min);
	real32 diff_press_pa_raw = diff_press_PSI * PSI_to_Pa;

	// correct for 5V rail voltage if possible
	voltage_correction(diff_press_pa_raw, temperature);

	// the raw value still should be compensated for the known offset
	diff_press_pa_raw -= _diff_pres_offset;

	/*
	 With the above calculation the 4525 sensor will produce a
	 positive number when the top port is used as a dynamic port
	 and bottom port is used as the static port
	 */

	struct differential_pressure_s report;

	/* track maximum differential pressure measured (so we can work out top speed). */
	if (diff_press_pa_raw > _max_differential_pressure_pa) {
		_max_differential_pressure_pa = diff_press_pa_raw;
	}

	report.timestamp = hrt_absolute_time();
	report.error_count = perf_event_count(_comms_errors);
	report.temperature = temperature;
	report.differential_pressure_filtered_pa = _filter.apply(diff_press_pa_raw);

	report.differential_pressure_raw_pa = diff_press_pa_raw;
	report.max_differential_pressure_pa = _max_differential_pressure_pa;

	if (_airspeed_pub != nullptr && !(_pub_blocked)) {
		/* publish it */
		orb_publish(ORB_ID(differential_pressure), _airspeed_pub, &report);
	}

	new_report(report);

	/* notify anyone waiting for data */
	poll_notify(POLLIN);

	ret = OK;

	perf_end(_sample_perf);

	return ret;
}

/*
 correct for 5V rail voltage if the system_power ORB topic is
 available

 See http://uav.tridgell.net/4525/4525-offset.png for a graph of
 offset versus voltage for 3 sensors
 */

void zzz(void) { //MSvoltage_correction(real32 &diff_press_pa, real32 &temperature)

	if (system_power.voltage5V_v < 3.0f || system_power.voltage5V_v > 6.0f)
		// not valid, skip correction
		return;


	const real32 slope = 65.0f;
	/*
	 apply a piecewise linear correction, flattening at 0.5V from 5V
	 */
	real32 voltage_diff = system_power.voltage5V_v - 5.0f;

	if (voltage_diff > 0.5f)
		voltage_diff = 0.5f;

	if (voltage_diff < -0.5f)
		voltage_diff = -0.5f;

	diff_press_pa -= voltage_diff * slope;

	/*
	 the temperature measurement varies as well
	 */
	const real32 temp_slope = 0.887f;
	voltage_diff = system_power.voltage5V_v - 5.0f;

	if (voltage_diff > 0.5f)
		voltage_diff = 0.5f;


	if (voltage_diff < -1.0f)
		voltage_diff = -1.0f;

	temperature -= voltage_diff * temp_slope;

}

MEASAirspeed *g_dev = nullptr;

void start(int i2c_bus);
void stop();
void test();
void reset();
void info();

/**
 * Start the driver.
 *
 * This function call only returns once the driver is up and running
 * or failed to detect the sensor.
 */
void start(int i2c_bus) {
	int fd;


	/* create the driver, try the 4525DO first */
	g_dev = new MEASAirspeed(i2c_bus, I2C_ADDRESS_4525DO, PATH_4525);

	/* try the 5525DSO next if init fails */
	if (OK != g_dev->Airspeed::init()) {
		delete g_dev;
		g_dev = new MEASAirspeed(i2c_bus, I2C_ADDRESS_5525DSO, PATH_5525);


}
#endif

void ReadAirspeed(void) {

// called inside Altitude update

switch (P(AirspeedSensorType)) {
case MS4525D0I2C:
	ReadASDiffPressureI2C();
	break;
case MPXV7002DPAnalog:
	break;
case ASThermopileAnalog:
	break;
case ASGPSDerived:
	break;
default:
	break;
} // switch

Airspeed = 10.0f;

} // ReadAirspeed

void InitAirspeed(void) {

} // InitAirspeed

