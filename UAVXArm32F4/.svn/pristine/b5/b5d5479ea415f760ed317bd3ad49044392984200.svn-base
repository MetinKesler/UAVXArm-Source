// ===============================================================================================
// =                                UAVX Quadrocopter ContRoller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU
//    General Public License as published by the Free Software Foundation, either version 3 of the
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License aint32 with this program.
//    If not, see http://www.gnu.org/licenses/


#include "UAVX.h"

#define MAX_YAW_RATE_RADPS DegreesToRadians(60) // TODO: 180 may be too high - above this rate AHRS compensation of heading is zero
real32 dT, dTR, dTOn2, dTROn2;
uint32 LastInertialUpdateuS = 0;
real32 AccConfidenceSDevR = 5.0f;
real32 AccConfidence;
real32 AccZ;
real32 MagConfidence;
real32 EstMagHeading = 0.0f;

real32 CalculateAccConfidence(real32 AccMag) {
	// Gaussian decay in accelerometer value belief
	static real32 confp = 1.0f;
	real32 conf, accNorm;

	accNorm = AccMag * GRAVITY_MPS_S_R;
	conf = expf(-0.5f * Sqr(Abs(accNorm - 1.0f) * AccConfidenceSDevR));
	confp = HardFilter(confp, conf);

	return (confp);
} // CalculateAccConfidence


real32 CalculateMagConfidence(void) {
	// reduce confidence in mag for high yaw rates
	real32 c;

	if (State == InFlight) {
		c = KpMagBase * (1.0f - Rate[Yaw] / MAX_YAW_RATE_RADPS); // linear for now
		c = Limit(c, 0.0f, KpMagBase);
	} else
		c = KpMagBase * 10.0;

	return (c);
} // CalculateMagConfidence

//=====================================================================================================
// AHRS
// S.O.H. Madgwick
// 25th August 2010
//=====================================================================================================
// Description:
//
// Quaternion implementation of the 'DCM filter' [Mayhony et al].  Incorporates the magnetic distortion
// compensation algorithms from my filter [Madgwick] which eliminates the need for a reference
// direction of flux (bx bz) to be predefined and limits the effect of magnetic distortions to yaw
// axis only.
//
// Gyroscope units are radians/second, accelerometer and magnetometer units are irrelevant as the
// vector is normalised.
//
// adapted from John Ihlein's AQ version translated to Aerospace Coordinates
//
// integral terms removed and accelerometer & magnetometer confidence scheme by Prof. G.K. Egan 2012
//
//=====================================================================================================

real32 KpAccBase = 2.0f; // was 5.0f
real32 KpAcc;
real32 KpMagBase = 5.0f;
real32 KpMag;

//#define gyroMeasError DegreesToRadians(5)  // gyroscope measurement error in rad/s (shown as 5 deg/s)
//#define gyroMeasDrift DegreesToRadians(0.2) // gyroscope measurement error in rad/s/s (shown as 0.2f deg/s/s)
//#define beta (sqrtf(0.75f)*gyroMeasError) // compute beta aka KpAccBase
//#define zeta (sqrtf(0.75f)*gyroMeasDrift) // compute zeta aka KiAccBase not used

real32 q0, q1, q2, q3;
real32 q0q0, q0q1, q0q2, q0q3;
real32 q1q1, q1q2, q1q3;
real32 q2q2, q2q3;
real32 q3q3;

real32 bi00, bi01, bi02;
real32 bi10, bi11, bi12;
real32 bi20, bi21, bi22;

void UpdateBodyToInertialTransform(void) {

	bi00 = q0q0 + q1q1 - q2q2 - q3q3; // yaw
	//bi01 = 2.0f * (q1q2 - q0q3);
	//bi02 = 2.0f * (q0q2 + q1q3);

	bi10 = 2.0f * (q1q2 + q0q3);
	//bi11 = q0q0 - q1q1 + q2q2 - q3q3; // yaw
	//bi12 = 2.0f * (q2q3 - q0q1);

	bi20 = 2.0f * (q1q3 - q0q2); // pitch gx
	bi21 = 2.0f * (q0q1 + q2q3); // roll gy
	bi22 = q0q0 - q1q1 - q2q2 + q3q3; // yaw gz

	A[Roll].Angle = atan2f(bi21, bi22);
	A[Pitch].Angle = -asinf(bi20);
	A[Yaw].Angle = atan2f(bi10, bi00);

} // UpdateBodyToInertialTransform

real32 GravityCompensatedAccZ(void) {

	return 2.0f * (q1q3 - q0q2) * Acc[X] + 2.0f * (q0q1 + q2q3) * Acc[Y]
			+ (q0q0 - q1q1 - q2q2 + q3q3) * Acc[Z] + GRAVITY_MPS_S;
} // GravityCompensatedAccZ

real32 AttitudeCosine(void) { // for attitude throttle compensation

	return q0q0 - q1q1 - q2q2 + q3q3;

} // AttitudeCosine


void VersanoCompensation(void) {
#if defined(USE_VERSANO_GRAVITY_COMP)
	// http://www.varesano.net/blog/fabio/simple-gravity-compensation-9-dom-imus
	// compensate the accelerometer readings from gravity.

	real32 cx, cy, cz;

	// get expected direction of gravity from previous iteration!
	cx = 2.0f * (q1q3 - q0q2);
	cy = 2.0f * (q0q1 + q2q3);
	cz = q0q0 - q1q1 - q2q2 + q3q3;

	ax -= cx;
	ay -= cy;
	az -= cz;

#endif
} // VersanoCompensation


// REVISED MADGWICK


void InitMadgwick(void) {

	q0 = 1.0f; // cosf(MagHeading * 0.5f);
	q1 = 0.0f;
	q2 = 0.0f;
	q3 = 0.0f; // sinf(MagHeading * 0.5f);

} // InitMadgwick


void UpdateMadgwickHeading(void) {

	if (F.Emulation) {
		EstMagHeading += Rate[Yaw] * dT;
		EstMagHeading = Make2Pi(EstMagHeading);
		MagHeading = EstMagHeading;
		Heading = Make2Pi(MagHeading + MagVariation);
	} else {
		if (CurrStateEst == MadgwickIMU) {
			GetMagnetometer();
			if (F.NewMagValues) {
				CalculateMagneticHeading();
				Heading = Make2Pi(MagHeading + MagVariation);
			}
		} else {
			MagHeading = Make2Pi(A[Yaw].Angle);
			Heading = Make2Pi(MagHeading + MagVariation);
		}
	}
} // UpdateMadgwickIMUHeading


// Implementation of Madgwick's IMU and AHRS algorithms.
// See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms
//
// 19/02/2012	SOH Madgwick Magnetometer measurement is normalised << THIS VERSION
// modified by Prof. G.K. Egan 2017

// paper suggest Beta=0.041 for MARG
//#define betaDef 0.1f // 2 * proportional gain
//real32 beta = betaDef; // 2 * proportional gain (Kp)
real32 BetaBase;

void MadgwickMARGUpdate(real32 gx, real32 gy, real32 gz, real32 ax, real32 ay,
		real32 az, real32 mx, real32 my, real32 mz) {
	real32 Beta;
	real32 AccMag, normR;
	real32 s0, s1, s2, s3;

	real32 hx, hy;
	real32 wq0, wq1, wq2, wq3;
	real32 _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _8bx, _8bz, _2q0, _2q1,
			_2q2, _2q3, _2q0q2, _2q2q3, _4q0, _4q1, _4q2, _8q1, _8q2;

	q0q0 = q0 * q0;
	q0q1 = q0 * q1;
	q0q2 = q0 * q2;
	q0q3 = q0 * q3;
	q1q1 = q1 * q1;
	q1q2 = q1 * q2;
	q1q3 = q1 * q3;
	q2q2 = q2 * q2;
	q2q3 = q2 * q3;
	q3q3 = q3 * q3;

	_2q0 = 2.0f * q0;
	_2q1 = 2.0f * q1;
	_2q2 = 2.0f * q2;
	_2q3 = 2.0f * q3;

	// Rate of change of quaternion from gyroscope
	wq0 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
	wq1 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
	wq2 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
	wq3 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);

	AccMag = sqrtf(Sqr(ax) + Sqr(ay) + Sqr(az));
	AccConfidence = CalculateAccConfidence(AccMag);

	// Normalise accelerometer measurement
	normR = invSqrt(AccMag);
	ax *= normR;
	ay *= normR;
	az *= normR;

	// default KpAccBase is 0.2 paper says 0.041
	Beta = State == InFlight ? BetaBase * AccConfidence : BetaBase * 2.5f;

	GetMagnetometer();

	if (true) {
		if (F.NewMagValues)
			F.NewMagValues = false;

		// Normalise magnetometer measurement
		normR = invSqrt(Sqr(mx) + Sqr(my) + Sqr(mz));
		mx *= normR;
		my *= normR;
		mz *= normR;

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
		_2q0my = 2.0f * q0 * my;
		_2q0mz = 2.0f * q0 * mz;
		_2q1mx = 2.0f * q1 * mx;

		_2q0q2 = _2q0 * q2;
		_2q2q3 = _2q2 * q3;

#define MARG_CORRECTED
#if defined(MARG_CORRECTED)
		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
				+ _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
				+ my * q2q2 + _2q2 * mz * q3 - my * q3q3;
		_2bx = sqrt(hx * hx + hy * hy);
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
				+ _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
		_4bx = 2.0f * _2bx;
		_4bz = 2.0f * _2bz;
		_8bx = 2.0f * _4bx;
		_8bz = 2.0f * _4bz;

#if defined(AAA)
		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * (q1q3 - q0q2) - ax) + _2q1 * (2.0f * (q0q1 + q2q3)
				- ay) + -_4bz * q2 * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3
						- q0q2) - mx) + (-_4bx * q3 + _4bz * q1) * (_4bx
				* (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + _4bx * q2
		* (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
		s1 = _2q3 * (2.0f * (q1q3 - q0q2) - ax) + _2q0 * (2.0f * (q0q1 + q2q3)
				- ay) + -4.0f * q1 * (2.0f * (0.5 - q1q1 - q2q2) - az) + _4bz
		* q3 * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx)
		+ (_4bx * q2 + _4bz * q0) * (_4bx * (q1q2 - q0q3) + _4bz
				* (q0q1 + q2q3) - my) + (_4bx * q3 - _8bz * q1) * (_4bx
				* (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
		s2 = -_2q0 * (2.0f * (q1q3 - q0q2) - ax) + _2q3 * (2.0f * (q0q1 + q2q3)
				- ay) + (-4.0f * q2) * (2.0f * (0.5 - q1q1 - q2q2) - az)
		+ (-_8bx * q2 - _4bz * q0) * (_4bx * (0.5 - q2q2 - q3q3) + _4bz
				* (q1q3 - q0q2) - mx) + (_4bx * q1 + _4bz * q3) * (_4bx
				* (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx * q0
				- _8bz * q2) * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1
						- q2q2) - mz);
		s3 = _2q1 * (2.0f * (q1q3 - q0q2) - ax) + _2q2 * (2.0f * (q0q1 + q2q3)
				- ay) + (-_8bx * q3 + _4bz * q1) * (_4bx * (0.5 - q2q2 - q3q3)
				+ _4bz * (q1q3 - q0q2) - mx) + (-_4bx * q0 + _4bz * q2) * (_4bx
				* (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx * q1)
		* (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
#else
		s0 = -_2q2 * (2 * (q1q3 - q0q2) - ax) + _2q1 * (2 * (q0q1 + q2q3) - ay)
				+ -_4bz * q2 * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3
						- q0q2) - mx) + (-_4bx * q3 + _4bz * q1) * (_4bx
				* (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + _4bx * q2
				* (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
		s1 = _2q3 * (2 * (q1q3 - q0q2) - ax) + _2q0 * (2 * (q0q1 + q2q3) - ay)
				+ -4 * q1 * (2 * (0.5 - q1q1 - q2q2) - az) + _4bz * q3 * (_4bx
				* (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (_4bx * q2
				+ _4bz * q0) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3)
				- my) + (_4bx * q3 - _8bz * q1) * (_4bx * (q0q2 + q1q3) + _4bz
				* (0.5 - q1q1 - q2q2) - mz);
		s2 = -_2q0 * (2 * (q1q3 - q0q2) - ax) + _2q3 * (2 * (q0q1 + q2q3) - ay)
				+ (-4 * q2) * (2 * (0.5 - q1q1 - q2q2) - az) + (-_8bx * q2
				- _4bz * q0) * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3
				- q0q2) - mx) + (_4bx * q1 + _4bz * q3) * (_4bx * (q1q2 - q0q3)
				+ _4bz * (q0q1 + q2q3) - my) + (_4bx * q0 - _8bz * q2) * (_4bx
				* (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
		s3 = _2q1 * (2 * (q1q3 - q0q2) - ax) + _2q2 * (2 * (q0q1 + q2q3) - ay)
				+ (-_8bx * q3 + _4bz * q1) * (_4bx * (0.5 - q2q2 - q3q3) + _4bz
						* (q1q3 - q0q2) - mx) + (-_4bx * q0 + _4bz * q2)
				* (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx
				* q1)
				* (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
#endif

#else

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
		+ _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
		+ my * q2q2 + _2q2 * mz * q3 - my * q3q3;
		_2bx = sqrt(hx * hx + hy * hy);
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
		+ _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
		_4bx = 2.0f * _2bx;
		_4bz = 2.0f * _2bz;

		// Gradient descent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3
				- ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3
						- q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx
				* (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2
		* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3
				- ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz
		* q3
		* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
		+ (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz
				* (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx
				* (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3
				- ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
		+ (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3)
				+ _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3)
		* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx
				* q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1
						- q2q2) - mz);
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3
				- ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3)
				+ _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx
				* (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1
		* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
#endif
	} else {

		_4q0 = 4.0f * q0;
		_4q1 = 4.0f * q1;
		_4q2 = 4.0f * q2;
		_8q1 = 8.0f * q1;
		_8q2 = 8.0f * q2;

		// Gradient descent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
				+ _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
				+ _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
	}

	// normalise step magnitude
	normR = invSqrt(Sqr(s0) + Sqr(s1) + Sqr(s2) + Sqr(s3));
	s0 *= normR;
	s1 *= normR;
	s2 *= normR;
	s3 *= normR;

	// Apply feedback step
	wq0 -= Beta * s0;
	wq1 -= Beta * s1;
	wq2 -= Beta * s2;
	wq3 -= Beta * s3;

	// Integrate rate of change of quaternion to yield quaternion
	q0 += wq0 * dT;
	q1 += wq1 * dT;
	q2 += wq2 * dT;
	q3 += wq3 * dT;

	// Normalise quaternion
	normR = invSqrt(Sqr(q0) + Sqr(q1) + Sqr(q2) + Sqr(q3));
	q0 *= normR;
	q1 *= normR;
	q2 *= normR;
	q3 *= normR;

	UpdateBodyToInertialTransform();

} // MadgwickMARGUpdate


#define gyroMeasError DegreesToRadians(0.5f) // gyroscope measurement error in rad/s (shown as 5 deg/s)
#define gyroMeasDrift DegreesToRadians(0.02f) // gyroscope measurement error in rad/s/s (shown as 0.2f deg/s/s)
#define beta 0.2f
#define beta1 (sqrt(0.75f) * gyroMeasError) // compute beta
#define zeta (sqrt(0.75f) * gyroMeasDrift) // compute zeta
real32 bx = 1.0f, bz = 0.0f; // reference direction of flux in earth frame
real32 wx = 0.0f, wy = 0.0f, wz = 0.0f; // estimate gyroscope biases error

void MadgwickMARGUpdate2(real32 gx, real32 gy, real32 gz, real32 ax, real32 ay,
		real32 az, real32 mx, real32 my, real32 mz) {
	real32 normR; // vector norm
	real32 wq0, wq1, wq2, wq3; // quaternion rate from gyroscopes elements
	real32 f1, f2, f3, f4, f5, f6; // objective function elements
	real32 J11or24, J12or23, J13or22, J14or21, J32, J33, // objective function Jacobian elements
			J41, J42, J43, J44, J51, J52, J53, J54, J61, J62, J63, J64; //
	real32 s0, s1, s2, s3; // estimated direction of the gyroscope error
	real32 w_err_x, w_err_y, w_err_z; // estimated direction of the gyroscope error (angular)
	real32 hx, hy, hz; // computed flux in the earth frame

	// Compiler should do these CSE optimisations?
	// auxiliary variables to avoid repeated calculations

	real32 _2q0 = 2.0f * q0;
	real32 _2q1 = 2.0f * q1;
	real32 _2q2 = 2.0f * q2;
	real32 _2q3 = 2.0f * q3;

	real32 _2bx = 2.0f * bx;
	real32 _2bz = 2.0f * bz;
	real32 _2bxq0 = _2bx * q0;
	real32 _2bxq1 = _2bx * q1;
	real32 _2bxq2 = _2bx * q2;
	real32 _2bxq3 = _2bx * q3;
	real32 _2bzq0 = _2bz * q0;
	real32 _2bzq1 = _2bz * q1;
	real32 _2bzq2 = _2bz * q2;
	real32 _2bzq3 = _2bz * q3;
	real32 q0q1;
	real32 q0q2 = q0 * q2;
	real32 q0q3;
	real32 q1q2;
	real32 q1q3 = q1 * q3;
	real32 q2q3;

	real32 AccMag = sqrtf(Sqr(ax) + Sqr(ay) + Sqr(az));
	AccConfidence = 1.0f; //CalculateAccConfidence(AccMag);

	// renormalise to attempt to remove a little acc vibration noise
	normR = 1.0f / AccMag;
	ax *= normR;
	ay *= normR;
	az *= normR;

	// compute the objective function and Jacobian
	f1 = _2q1 * q3 - _2q0 * q2 - ax;
	f2 = _2q0 * q1 + _2q2 * q3 - ay;
	f3 = 1.0 - _2q1 * q1 - _2q2 * q2 - az;

	J11or24 = _2q2; // J11 negated in matrix multiplication
	J12or23 = 2.0f * q3;
	J13or22 = _2q0; // J12 negated in matrix multiplication
	J14or21 = _2q1;
	J32 = 2.0f * J14or21; // negated in matrix multiplication
	J33 = 2.0f * J11or24; // negated in matrix multiplication

	GetMagnetometer();

	if (true) { //F.NewMagValues) { // 9DOF

		if (F.NewMagValues)
			F.NewMagValues = false;

		// normalise the magnetometer measurement
		normR = invSqrt(Sqr(mx) + Sqr(my) + Sqr(mz));
		mx *= normR;
		my *= normR;
		mz *= normR;
		real32 _2mx = 2.0f * mx;
		real32 _2my = 2.0f * my;
		real32 _2mz = 2.0f * mz;

		// ..... compute the objective function and Jacobian
		f4 = _2bx * (0.5f - q2 * q2 - q3 * q3) + _2bz * (q1q3 - q0q2) - mx;
		f5 = _2bx * (q1 * q2 - q0 * q3) + _2bz * (q0 * q1 + q2 * q3) - my;
		f6 = _2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1 * q1 - q2 * q2) - mz;

		J41 = _2bzq2; // negated in matrix multiplication
		J42 = _2bzq3;
		J43 = 2.0f * _2bxq2 + _2bzq0; // negated in matrix multiplication
		J44 = 2.0f * _2bxq3 - _2bzq1; // negated in matrix multiplication
		J51 = _2bxq3 - _2bzq1; // negated in matrix multiplication
		J52 = _2bxq2 + _2bzq0;
		J53 = _2bxq1 + _2bzq3;
		J54 = _2bxq0 - _2bzq2; // negated in matrix multiplication
		J61 = _2bxq2;
		J62 = _2bxq3 - 2.0f * _2bzq1;
		J63 = _2bxq0 - 2.0f * _2bzq2;
		J64 = _2bxq1;

		// compute the gradient (matrix multiplication)
		s0 = J14or21 * f2 - J11or24 * f1 - J41 * f4 - J51 * f5 + J61 * f6;
		s1 = J12or23 * f1 + J13or22 * f2 - J32 * f3 + J42 * f4 + J52 * f5 + J62
				* f6;
		s2 = J12or23 * f2 - J33 * f3 - J13or22 * f1 - J43 * f4 + J53 * f5 + J63
				* f6;
		s3 = J14or21 * f1 + J11or24 * f2 - J44 * f4 - J54 * f5 + J64 * f6;

		// normalise the gradient to estimate direction of the gyroscope error
		normR = invSqrt(Sqr(s0) + Sqr(s1) + Sqr(s2) + Sqr(s3));
		s0 *= normR;
		s1 *= normR;
		s2 *= normR;
		s3 *= normR;

		// compute angular estimated direction of the gyroscope error
		w_err_x = _2q0 * s1 - _2q1 * s0 - _2q2 * s3 + _2q3 * s2;
		w_err_y = _2q0 * s2 + _2q1 * s3 - _2q2 * s0 - _2q3 * s1;
		w_err_z = _2q0 * s3 - _2q1 * s2 + _2q2 * s1 - _2q3 * s0;

		// compute and remove the gyroscope biases
		wx += zeta * w_err_x * dT;
		wy += zeta * w_err_y * dT;
		wz += zeta * w_err_z * dT;
		gx -= wx;
		gy -= wy;
		gz -= wz;

		// compute the quaternion rate measured by gyroscopes
		wq0 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
		wq1 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
		wq2 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
		wq3 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);

		// compute then integrate the estimated quaternion rate
		q0 += (wq0 - (beta1 * s0)) * dT;
		q1 += (wq1 - (beta1 * s1)) * dT;
		q2 += (wq2 - (beta1 * s2)) * dT;
		q3 += (wq3 - (beta1 * s3)) * dT;

		// normalise quaternion
		normR = invSqrt(Sqr(q0) + Sqr(q1) + Sqr(q2) + Sqr(q3));
		q0 *= normR;
		q1 *= normR;
		q2 *= normR;
		q3 *= normR;

		// compute flux in the earth frame
		q0q1 = q0 * q1; // recompute auxilary variables
		q0q2 = q0 * q2;
		q0q3 = q0 * q3;
		q2q3 = q2 * q3;
		q1q2 = q1 * q2;
		q1q3 = q1 * q3;

		hx = _2mx * (0.5f - q2 * q2 - q3 * q3) + _2my * (q1q2 - q0q3) + _2mz
				* (q1q3 + q0q2);
		hy = _2mx * (q1q2 + q0q3) + _2my * (0.5f - q1 * q1 - q3 * q3) + _2mz
				* (q2q3 - q0q1);
		hz = _2mx * (q1q3 - q0q2) + _2my * (q2q3 + q0q1) + _2mz * (0.5f - q1
				* q1 - q2 * q2);

		// normalise the flux vector to have only components in the x and z
		bx = sqrt(Sqr(hx) + Sqr(hy));
		bz = hz;

	} else { // 6DOF

		// Compute the gradient (matrix multiplication)
		s0 = J14or21 * f2 - J11or24 * f1;
		s1 = J12or23 * f1 + J13or22 * f2 - J32 * f3;
		s2 = J12or23 * f2 - J33 * f3 - J13or22 * f1;
		s3 = J14or21 * f1 + J11or24 * f2;

		// Normalise the gradient
		normR = invSqrt(Sqr(s0) + Sqr(s1) + Sqr(s2) + Sqr(s3));
		s0 *= normR;
		s1 *= normR;
		s2 *= normR;
		s3 *= normR;

		// Compute the quaternion derivative measured by gyroscopes
		wq0 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
		wq1 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
		wq2 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
		wq3 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);

		// Compute then integrate the estimated quaternion derivative
		q0 += (wq0 - (beta * s0)) * dT;
		q1 += (wq1 - (beta * s1)) * dT;
		q2 += (wq2 - (beta * s2)) * dT;
		q3 += (wq3 - (beta * s3)) * dT;

		// Normalise quaternion
		normR = invSqrt(Sqr(q0) + Sqr(q1) + Sqr(q2) + Sqr(q3));
		q0 *= normR;
		q1 *= normR;
		q2 *= normR;
		q3 *= normR;
	}

	UpdateBodyToInertialTransform();

} // MadgwickMARGUpdate2

//___________________________________________________________________________

// Madgwick Quaternion version of Mahony et al.  Discrete Cosine Transform code
// rewritten by Prof G.K. Egan

void MadgwickUpdate(boolean AHRS, real32 gx, real32 gy, real32 gz, real32 ax,
		real32 ay, real32 az, real32 mx, real32 my, real32 mz) {

	real32 normR;

	real32 q0i, q1i, q2i, q3i;
	real32 hx, hy, hz;
	real32 bx, bz;
	real32 vx, vy, vz;
	real32 wx, wy, wz;

	q0q0 = q0 * q0;
	q0q1 = q0 * q1;
	q0q2 = q0 * q2;
	q0q3 = q0 * q3;
	q1q1 = q1 * q1;
	q1q2 = q1 * q2;
	q1q3 = q1 * q3;
	q2q2 = q2 * q2;
	q2q3 = q2 * q3;
	q3q3 = q3 * q3;

	// estimated direction of gravity (v)
	vx = 2.0f * (q1q3 - q0q2);
	vy = 2.0f * (q0q1 + q2q3);
	vz = q0q0 - q1q1 - q2q2 + q3q3;

	// error is sum of cross product between reference direction
	// of fields and direction measured by sensors

	real32 AccMag = sqrtf(Sqr(ax) + Sqr(ay) + Sqr(az));
	AccConfidence = CalculateAccConfidence(AccMag);

	// renormalise to attempt to remove a little acc vibration noise
	normR = 1.0f / AccMag;
	ax *= normR;
	ay *= normR;
	az *= normR;

	KpAcc = State == InFlight ? KpAccBase * AccConfidence : KpAccBase * 5.0f;
	gx += (vy * az - vz * ay) * KpAcc;
	gy += (vz * ax - vx * az) * KpAcc;
	gz += (vx * ay - vy * ax) * KpAcc;

	if (AHRS) {

		GetMagnetometer();

		if (F.NewMagValues) { // no compensation for latency
			F.NewMagValues = false;

			KpMag = CalculateMagConfidence();

			normR = invSqrt(Sqr(mx) + Sqr(my) + Sqr(mz));
			mx *= normR;
			my *= normR;
			mz *= normR;

			// reference direction of flux
			hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz
					* (q1q3 + q0q2));
			hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz
					* (q2q3 - q0q1));
			hz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f
					- q1q1 - q2q2));

			bx = sqrtf(Sqr(hx) + Sqr(hy));
			bz = hz;

			// estimated direction of flux (w)
			wx = 2.0f * (bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2));
			wy = 2.0f * (bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3));
			wz = 2.0f * (bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2));

			gx += (my * wz - mz * wy) * KpMag;
			gy += (mz * wx - mx * wz) * KpMag;
			gz += (mx * wy - my * wx) * KpMag;
		}
	}

	// integrate quaternion rate
	q0i = (-q1 * gx - q2 * gy - q3 * gz) * dTOn2;
	q1i = (q0 * gx + q2 * gz - q3 * gy) * dTOn2;
	q2i = (q0 * gy - q1 * gz + q3 * gx) * dTOn2;
	q3i = (q0 * gz + q1 * gy - q2 * gx) * dTOn2;
	// two steps to preserve old to new q
	q0 += q0i;
	q1 += q1i;
	q2 += q2i;
	q3 += q3i;

	// normalize quaternion
	normR = invSqrt(Sqr(q0) + Sqr(q1) + Sqr(q2) + Sqr(q3));
	q0 *= normR;
	q1 *= normR;
	q2 *= normR;
	q3 *= normR;

	UpdateBodyToInertialTransform();

} // MadgwickUpdate


void UpdateInertial(void) {
	int32 a;

	if (F.Emulation) {
		DoEmulation(); // produces ROC, Altitude etc.
		MadgwickUpdate(false, Rate[Roll], Rate[Pitch], Rate[Yaw], Acc[BF],
				Acc[LR], Acc[UD], Mag[X], Mag[Y], Mag[Z]);
	} else {
		GetIMU();
		if (CurrStateEst == MadgwickMARG)
			MadgwickMARGUpdate2(Rate[Roll], Rate[Pitch], Rate[Yaw], Acc[BF],
					Acc[LR], Acc[UD], Mag[X], Mag[Y], Mag[Z]);
		else
			MadgwickUpdate(CurrStateEst == MadgwickAHRS, Rate[Roll],
					Rate[Pitch], Rate[Yaw], Acc[BF], Acc[LR], Acc[UD], Mag[X],
					Mag[Y], Mag[Z]);
	}

	DoControl();

	// one cycle delay OK
	UpdateMadgwickHeading();

	UpdateGPS();
	if (F.NewGPSPosition) {
		F.NewGPSPosition = false;
		for (a = NorthC; a <= DownC; a++) {
			Nav.Pos[a] = GPS.Pos[a];
			Nav.Vel[a] = GPS.Vel[a];
		}
		CheckNavEnable();
	}

	if (F.Emulation) {
		RangefinderAltitude = BaroAltitude - OriginAltitude;
		F.UsingRangefinderAlt = RangefinderAltitude <= RF[RFType].maxAlt;
		//F.NearLevel &&
	} else {
		Airspeed = 0.5f * (AS_MIN_MPS + AS_MAX_MPS); // TODO: Airspeed call in altitude/atmosphere stuff
		UpdateAltitudeEstimates();
	}

}// UpdateInertial


//____________________________________________________________________________


void CheckNavEnable(void) {

	if ((mSClock() > mS[NavActiveTime]) && !F.NavigationActive) {
		F.NavigationActive = true;
		ResumeHoldingStation();
		NavSwStateP = NavSwUnknown;
	}

	//	if (!F.NavigationEnabled)
	//		AcquireHoldPosition();

	F.GPSPosUpdated = true; // for telemetry
	F.NewNavUpdate = F.NavigationEnabled && !F.Bypass;

} // CheckNavEnable


#if defined(OTHER_STUFF)

// Madgwicks implementation of Mahonys DCT

void MahonyAHRSupdateIMU(real32 gx, real32 gy, real32 gz, real32 ax, real32 ay, real32 az) {
	const real32 Kp = 5.0f;
	real32 normR;
	real32 vx, vy, vz;
	real32 ex, ey, ez;
	real32 qa, qb, qc;

	// Estimated direction of gravity and vector perpendicular to magnetic flux
	vx = 2.0f * (q1 * q3 - q0 * q2);
	vy = 2.0f * (q0 * q1 + q2 * q3);
	vz = 2.0f * (q0 * q0 - 0.5f + q3 * q3);

	// Error is sum of cross product between estimated and measured direction of gravity
	ex = (ay * vz - az * vy);
	ey = (az * vx - ax * vz);
	ez = (ax * vy - ay * vx);

} // MahonyAHRSupdateIMU

void MahonyAHRSupdate(real32 gx, real32 gy, real32 gz, real32 ax, real32 ay, real32 az, real32 mx, real32 my, real32 mz) {
	const real32 Kp = 5.0f;
	const real32 Ki = 0.0f;
	static real32 integralFBx = 0.0f;
	static real32 integralFBy = 0.0f;
	static real32 integralFBz = 0.0f;
	real32 normR;
	// real32 q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	real32 hx, hy, bx, bz;
	real32 vx, vy, vz, gx, gy, gz;
	real32 ex, ey, ez;
	real32 qa, qb, qc;

	q0q0 = q0 * q0;
	q0q1 = q0 * q1;
	q0q2 = q0 * q2;
	q0q3 = q0 * q3;
	q1q1 = q1 * q1;
	q1q2 = q1 * q2;
	q1q3 = q1 * q3;
	q2q2 = q2 * q2;
	q2q3 = q2 * q3;
	q3q3 = q3 * q3;

	// Normalise accelerometer measurement
	normR = invSqrt(ax * ax + ay * ay + az * az);
	ax *= normR;
	ay *= normR;
	az *= normR;

	GetMagnetometer();

	if (F.NewMagValues) { // no compensation for latency
		F.NewMagValues = false;

		// Normalise magnetometer measurement
		normR = invSqrt(mx * mx + my * my + mz * mz);
		mx *= normR;
		my *= normR;
		mz *= normR;

		// Reference direction of Earth's magnetic field
		hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
		hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));

		bx = sqrt(Sqr(hx) + Sqr(hy));
		bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));

		// Estimated direction of gravity and magnetic field
		vx = 2.0f * (q1q3 - q0q2);
		vy = 2.0f * (q0q1 + q2q3);
		vz = 2.0f * (q0q0 - 0.5f + q3q3);

		gx = 2.0f * (bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2));
		gy = 2.0f * (bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3));
		gz = 2.0f * (bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2));

		// Error is sum of cross product between estimated direction and measured direction of field vectors
		ex = (ay * vz - az * vy) + (my * gz - mz * gy);
		ey = (az * vx - ax * vz) + (mz * gx - mx * gz);
		ez = (ax * vy - ay * vx) + (mx * gy - my * gx);

		// Compute and apply integral feedback if enabled
		if(Ki > 0.0f) {
			integralFBx += Ki * ex * dT; // integral error scaled by Ki
			integralFBy += Ki * ey * dT;
			integralFBz += Ki * ez * dT;
			gx += integralFBx; // apply integral feedback
			gy += integralFBy;
			gz += integralFBz;
		}
		else {
			integralFBx = 0.0f; // prevent integral windup
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

	} else
	MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);

	// Apply proportional feedback
	gx += Kp * ex;
	gy += Kp * ey;
	gz += Kp * ez;

	// Integrate rate of change of quaternion
	gx *= dTOn2;
	gy *= dTOn2;
	gz *= dTOn2;
	qa = q0;
	qb = q1;
	qc = q2;
	q0 += (-qb * gx - qc * gy - q3 * gz);
	q1 += (qa * gx + qc * gz - q3 * gy);
	q2 += (qa * gy - qb * gz + q3 * gx);
	q3 += (qa * gz + qb * gy - qc * gx);

	// Normalise quaternion
	normR = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
	q0 *= normR;
	q1 *= normR;
	q2 *= normR;
	q3 *= normR;

} // MahonyAHRSupdate


// An efficient orientation filter for inertial and inertial/magnetic sensor arrays
// Sebastian O.H. Madgwick
// April 30, 2010

// Madgwick Gradient Descent
//The following source code is an implementation of the orientation filter for a MARG sensor
//array including magnetic distortion and gyroscope drift compensation, in C. The code has
//been  optimised  minimise  the  required  number  of  arithmetic  operations  at  the
//expense  of data  memory.
//Each filter  update  requires  277  scalar  arithmetic  operations  (51  additions,
//57  subtracts,  155  multiplications,  14  divisions  and  5  square  roots).
//The  implementation requires 72 bytes of data memory for global variables and 260 bytes
//of data memory for local variables during each filter update function call.

// System constants
#define gyroMeasError DegreesToRadians(5)  // gyroscope measurement error in rad/s (shown as 5 deg/s)
#define gyroMeasDrift DegreesToRadians(0.2) // gyroscope measurement error in rad/s/s (shown as 0.2f deg/s/s)
#define beta (sqrtf(0.75f)*gyroMeasError) // compute beta
#define zeta (sqrtf(0.75f)*gyroMeasDrift) // compute zeta
real32 bx = 1.0f, bz = 0.0f; // reference direction of flux in earth frame

//
void MadgwickMARGUpdatePaperVersion(real32 gx, real32 gy, real32 gz, real32 ax, real32 ay,
		real32 az, real32 mx, real32 my, real32 mz) {

	// local system variables
	real32 normR; // reciprocal of vector norm

	real32 f1, f2, f3, f4, f5, f6; // objective function elements
	real32 J11or24, J12or23, J13or22, J14or21, J32,
	J33, // objective function Jacobian elements
	J41, J42, J43, J44, J51, J52, J53, J54, J61, J62, J63,
	J64;
	real32 s0, s1, s2, s3; // estimated direction of the gyroscope error
	real32 wq0, wq1, wq2, wq3; // quaternion rate from gyroscopes elements
	real32 wx, wy, wz; // estimated direction of the gyroscope error (angular)
	real32 hx, hy, hz; // computed flux in the earth frame

	// auxiliary variables to avoid repeated calculations
	real32 _2q0 = 2.0f * q0;
	real32 _2q1 = 2.0f * q1;
	real32 _2q2 = 2.0f * q2;
	real32 _2q3 = 2.0f * q3;
	real32 bxby2 = 2.0f * bx;
	real32 bzby2 = 2.0f * bz;
	real32 bxby2q0 = 2.0f * bx * q0;
	real32 bxby2q1 = 2.0f * bx * q1;
	real32 bxby2q2 = 2.0f * bx * q2;
	real32 bxby2q3 = 2.0f * bx * q3;
	real32 bzby2q0 = 2.0f * bz * q0;
	real32 bzby2q1 = 2.0f * bz * q1;
	real32 bzby2q2 = 2.0f * bz * q2;
	real32 bzby2q3 = 2.0f * bz * q3;
	real32 q0q1;
	real32 q0q2 = q0 * q2;
	real32 q0q3;
	real32 q1q2;
	real32 q1q3 = q1 * q3;
	real32 q2q3;
	real32 mxby2 = 2.0f * mx;
	real32 myby2 = 2.0f * my;
	real32 mzby2 = 2.0f * mz;

	// normalise the accelerometer measurement
	normR = invSqrt(Sqr(ax) + Sqr(ay) + Sqr(az));
	ax *= normR;
	ay *= normR;
	az *= normR;

	// normalise the magnetometer measurement
	normR = invSqrt(Sqr(mx) + Sqr(my) + Sqr(mz));
	mx *= normR;
	my *= normR;
	mz *= normR;

	// compute the objective function and Jacobian
	f1 = _2q1 * q3 - _2q0 * q2 - ax;
	f2 = _2q0 * q1 + _2q2 * q3 - ay;
	f3 = 1.0f - _2q1 * q1 - _2q2 * q2 - az;
	f4 = bxby2 * (0.5f - q2 * q2 - q3 * q3) + bzby2 * (q1q3 - q0q2) - mx;
	f5 = bxby2 * (q1 * q2 - q0 * q3) + bzby2 * (q0 * q1 + q2 * q3) - my;
	f6 = bxby2 * (q0q2 + q1q3) + bzby2 * (0.5f - Sqr(q1) - Sqr(q2)) - mz;
	J11or24 = _2q2; // J11 negated in matrix multiplication
	J12or23 = 2.0f * q3;
	J13or22 = _2q0; // J12 negated in matrix multiplication
	J14or21 = _2q1;
	J32 = 2.0f * J14or21; // negated in matrix multiplication
	J33 = 2.0f * J11or24; // negated in matrix multiplication
	J41 = bzby2q2; // negated in matrix multiplication
	J42 = bzby2q3;
	J43 = 2.0f * bxby2q2 + bzby2q0; // negated in matrix multiplication
	J44 = 2.0f * bxby2q3 - bzby2q1; // negated in matrix multiplication
	J51 = bxby2q3 - bzby2q1; // negated in matrix multiplication
	J52 = bxby2q2 + bzby2q0;
	J53 = bxby2q1 + bzby2q3;
	J54 = bxby2q0 - bzby2q2; // negated in matrix multiplication
	J61 = bxby2q2;
	J62 = bxby2q3 - 2.0f * bzby2q1;
	J63 = bxby2q0 - 2.0f * bzby2q2;
	J64 = bxby2q1;

	// compute the gradient (matrix multiplication)
	s0 = J14or21 * f2 - J11or24 * f1 - J41 * f4 - J51 * f5 + J61
	* f6;
	s1 = J12or23 * f1 + J13or22 * f2 - J32 * f3 + J42 * f4 + J52
	* f5 + J62 * f6;
	s2 = J12or23 * f2 - J33 * f3 - J13or22 * f1 - J43 * f4 + J53
	* f5 + J63 * f6;
	s3 = J14or21 * f1 + J11or24 * f2 - J44 * f4 - J54 * f5 + J64
	* f6;

	// normalise the gradient to estimate direction of the gyroscope error
	normR = invSqrt(Sqr(s0) + Sqr(s1) + Sqr(s2)
			+ Sqr(s3));
	s0 *= normR;
	s1 *= normR;
	s2 *= normR;
	s3 *= normR;

	// compute angular estimated direction of the gyroscope error
	wx = _2q0 * s1 - _2q1 * s0 - _2q2 * s3 + _2q3
	* s2;
	wy = _2q0 * s2 + _2q1 * s3 - _2q2 * s0 - _2q3
	* s1;
	wz = _2q0 * s3 - _2q1 * s2 + _2q2 * s1 - _2q3
	* s0;

	// compute and remove the gyroscope biases
	gx -= wx * dT * zeta;
	gy -= wy * dT * zeta;
	gz -= wz * dT * zeta;

	// compute the quaternion rate measured by gyroscopes
	wq0 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
	wq1 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
	wq2 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
	wq3 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);

	// compute then integrate the estimated quaternion rate
	q0 += (wq0 - (beta * s0)) * dT;
	q1 += (wq1 - (beta * s1)) * dT;
	q2 += (wq2 - (beta * s2)) * dT;
	q3 += (wq3 - (beta * s3)) * dT;

	// normalise quaternion
	normR = invSqrt(Sqr(q0) + Sqr(q1) + Sqr(q2) + Sqr(q3));
	q0 *= normR;
	q1 *= normR;
	q2 *= normR;
	q3 *= normR;

	// compute flux in the earth frame
	q0q1 = q0 * q1; // recompute auxiliary variables
	q0q2 = q0 * q2;
	q0q3 = q0 * q3;
	q2q3 = q2 * q3;
	q1q2 = q1 * q2;
	q1q3 = q1 * q3;

	hx = mxby2 * (0.5f - q2 * q2 - q3 * q3) + myby2 * (q1q2 - q0q3) + mzby2
	* (q1q3 + q0q2);
	hy = mxby2 * (q1q2 + q0q3) + myby2 * (0.5f - q1 * q1 - q3 * q3) + mzby2
	* (q2q3 - q0q1);
	hz = mxby2 * (q1q3 - q0q2) + myby2 * (q2q3 + q0q1) + mzby2 * (0.5f - q1
			* q1 - q2 * q2);

	// normalise the flux vector to have only components in the x and z
	bx = sqrt(Sqr(hx) + Sqr(hy));
	bz = hz;

} // MadgwickMARGUpdatePaperVersion


#endif
