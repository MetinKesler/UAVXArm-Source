// ===============================================================================================
// =                                UAVX Quadrocopter Controller                                 =
// =                           Copyright (c) 2008 by Prof. Greg Egan                             =
// =                 Original V3.15 Copyright (c) 2007 Ing. Wolfgang Mahringer                   =
// =                     http://code.google.com/p/uavp-mods/ http://uavp.ch                      =
// ===============================================================================================

//    This is part of UAVX.

//    UAVX is free software: you can redistribute it and/or modify it under the terms of the GNU
//    General Public License as published by the Free Software Foundation, either version 3 of the
//    License, or (at your option) any later version.

//    UAVX is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without
//    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//    See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.
//    If not, see http://www.gnu.org/licenses/


#ifndef _rc_h
#define _rc_h

#define RC_MAX_CHANNELS 20

//#define RCFilter		MediumFilter
#define RCFilter		SoftFilter
//#define RCFilter		NoFilter

#define RC_NO_CHANGE_TIMEOUT_MS 20000 // mS.
#define RC_INIT_FRAMES 60 // number of initial RC frames to allow filters to settle
#define RC_MARGIN_US	100 // could set zero or less for FrSky CPPM
#define RC_MIN_WIDTH_US (1000-RC_MARGIN_US) // temporarily to prevent wraparound 900
#define RC_MAX_WIDTH_US (2000+RC_MARGIN_US)
#define RCWidthOK(n) ((n > RC_MIN_WIDTH_US)&&(n < RC_MAX_WIDTH_US))

#define RC_GOOD_BUCKET_MAX 20
#define RC_GOOD_RATIO 4

//#define RC_THRES_STOP_STICK FromPercent(2)
#define RC_THRES_START_STICK	FromPercent(1)

#define THR_MAXIMUM FromPercent(90)

#define RC_FRAME_TIMEOUT_US 25000
#define RC_SIGNAL_TIMEOUT_US  (RC_FRAME_TIMEOUT_US * 5)
#define RC_THR_MAX  RC_MAXIMUM

#define RXBUF_SIZE	64

typedef struct {
	//uint8 syncbyte;
	unsigned c0  : 11;
    unsigned c1  : 11;
    unsigned c2  : 11;
    unsigned c3  : 11;
    unsigned c4  : 11;
    unsigned c5  : 11;
    unsigned c6  : 11;
    unsigned c7  : 11;
    unsigned c8  : 11;
    unsigned c9  : 11;
    unsigned c10 : 11;
    unsigned c11 : 11;
    unsigned c12 : 11;
    unsigned c13 : 11;
    unsigned c14 : 11;
    unsigned c15 : 11;
    uint8 flags;
   // uint8 endbyte
	/**
	 * The endByte is 0x00 on FrSky and some futaba RX's, on Some SBUS2 RX's the value indicates the telemetry byte that is sent after every 4th sbus frame.
	 *
	 * See https://github.com/cleanflight/cleanflight/issues/590#issuecomment-101027349
	 * and
	 * https://github.com/cleanflight/cleanflight/issues/590#issuecomment-101706023
	 */
	uint8 endByte;
    }  __attribute__((packed)) SBUSChannelStruct_t;

typedef struct {
	uint8 state;
	uint8 index;
	uint8 channel;
	uint32 lastByteReceived;
    union {
	uint8_t b[RXBUF_SIZE];
	SBUSChannelStruct_t c;
    } u;
} RCFrameStruct_t;

RCFrameStruct_t RCFrame;

// PPM
#define MIN_PPM_SYNC_PAUSE_US 2800 // 8x2+2=18 FrSky broken

typedef struct {
	uint8 Pin;
	int32 PrevEdge;
	boolean PrevState;
	boolean State;
	int32 RisingEdge;
	int32 FallingEdge;
	int32 Raw;
	int32 SpekRaw;
} RCInpDefStruct_t;

// Spektrum
#define MIN_SPEK_SYNC_PAUSE_US 5000
#define SPEK_MAX_CHANNEL 7
#define SPEK_FRAME_SIZE 16

#define SPEKTRUM_BAUD		115200

#define SPEKTRUM_WAIT_SYNC1	0x00
#define SPEKTRUM_WAIT_SYNC2	0x01
#define SPEKTRUM_ERR_COUNT1	0x02
#define SPEKTRUM_ERR_COUNT2	0x03
#define SPEKTRUM_CHANNEL1	0x04
#define SPEKTRUM_CHANNEL2	0x05

void CheckSpektrumSBus(void);
void DoRCSerial(uint32 Now);
void DoSpektrum(void);
void Spek1024LoopBack(void);
extern uint8 SpekChanShift;
extern uint8 SpekChanMask;

// Futaba SBus

enum {SBUSWaitSentinel, SBUSWaitData, SBUSWaitEnd};

#define SBUS_CHANNELS 16
#define SBUS_FRAME_SIZE 25

#define FUTABA_BAUD		100000
#define SBUS_START_CHAR	0x0f
#define SBUS_END_CHAR 0x00
#define MIN_SBUS_SYNC_PAUSE_US 4000

void DoSBus(void);
void SBusLoopBack(void);

// General
void InitRC(void);
void InitRCPins(uint8 PPMInputs);
void CheckRC(void);
void CheckRxLoopback(void);
void MapRC(void);
void CheckSticksHaveChanged(void);
void UpdateControls(void);
void CaptureTrims(void);
void CheckThrottleMoved(void);
void ReceiverTest(uint8 s);
void UpdateRCMap(void);

// ISR

void RCSerialISR(uint32 Now);
void RCParallelISR(TIM_TypeDef *tim);
void SpektrumSBusISR(uint8 ch);

extern RCInpDefStruct_t RCInp[];
extern uint32 RCLastFrameuS;
extern uint32 RCSyncWidthuS;
extern uint32 RCFrameIntervaluS;
extern uint8 Channel;
extern int8 SignalCount;
extern uint8 Map[], RMap[];
extern real32 RC[], RCp[];

extern uint8 DiscoveredRCChannels;
extern real32 MaxCruiseThrottle, DesiredThrottle, IdleThrottle,
		InitialThrottle, StickThrottle;
extern real32 CurrMaxRollPitchStick;
extern real32 DesiredCamPitchTrim;
extern real32 ThrLow, ThrHigh, ThrNeutral;
extern uint8 NoOfControls;
extern int8 RCStart;

extern boolean RxLoopbackEnabled;

extern uint8 CurrRCType;
extern uint16 LostFrameCount;
extern uint8 RSSIDeltang;

//======================================

#define PPM_PWM_CHANNEL		    13    // which PWM channel to use for PPM capture
#define PPM_MAX_CHANNELS	    12    // can't be > 18
#define PPM_GUARD_PULSE_LENGTH	2700
#define PPM_MIN_PULSE_WIDTH	    750
#define PPM_MAX_PULSE_WIDTH	    2250
#define PPM_STAB_CHANNEL_FRAMES 20    // number of consequitive frames with the same number of channels after which we assume that number of channels is stable ;)

#define ppmLimitRange( v ) ( ( v < -1024 ) ? -1024 : ( ( v > 1023 ) ? 1023 : v ) )
#define ppmLimitRangeThrottle( v ) ( ( v < -338 ) ? -338 : ( ( v > 1709 ) ? 1709 : v ) )

typedef struct {
    volatile int frameParsed;
    volatile int abortedFramesCount; // number of frame aborts
    int tmp_abortedFramesCount; // number of frame aborts, temporary while capturing
    uint32_t prevTimerVal;
    uint8_t lastChannel; // index into channels[]
    uint8_t previousChannels; // number of channels seen in previous frame;
    uint8_t stableChannelsCount; // number of frames with the same number of channels
    boolean inputValid;
//    int16_t channels[PPM_MAX_CHANNELS]; // channel values are stored here after successful
    int16_t tmp_channels[PPM_MAX_CHANNELS]; // temporary channel values while capturing the frame
} ppmStruct_t;

ppmStruct_t ppmData;

#endif


